// Generated by CoffeeScript 1.4.0
(function() {
  var Bot, Game, Player, async, binions, fs;

  async = require('async');

  fs = require('fs');

  binions = require('binions');

  Player = binions.Player;

  Game = binions.Game;

  Bot = require('./bot');

  Array.prototype.shuffle = function() {
    return this.sort(function() {
      return 0.5 - Math.random();
    });
  };

  exports.start = function(config) {
    var betting, bots, chips, j, location, maxRounds, name, obsNotifier, observer, observers, players, run, _i, _len, _ref, _ref1, _ref2;
    observers = [];
    players = [];
    bots = [];
    chips = config.chips;
    betting = (_ref = binions.betting)[config.betting.strategy].apply(_ref, config.betting.amounts);
    maxRounds = config.maxRounds || 100;
    _ref1 = config.observers || [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      observer = _ref1[_i];
      observers.push(require("" + (process.cwd()) + "/" + observer));
    }
    _ref2 = config.bots;
    for (name in _ref2) {
      location = _ref2[name];
      bots.push(Bot.create(location, {
        name: name
      }));
    }
    bots.shuffle();
    obsNotifier = function(type, msg) {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = observers.length; _j < _len1; _j++) {
        observer = observers[_j];
        if (observer[type]) {
          _results.push(observer[type](msg));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    j = 1;
    run = function() {
      var game;
      game = new Game(players, betting, j);
      game.run();
      game.on('roundComplete', function() {
        return obsNotifier('roundComplete', game.status(true));
      });
      return game.on('complete', function(status) {
        var numPlayer;
        obsNotifier('complete', game.status(true));
        j++;
        numPlayer = (players.filter(function(p) {
          return p.chips > 0;
        })).length;
        if (j > maxRounds || numPlayer < 2) {
          return process.exit();
        } else {
          players = players.concat(players.shift());
          return run();
        }
      });
    };
    return async.until((function() {
      return bots.filter(function(bot) {
        return !bot.loaded;
      }).length === 0;
    }), (function(cb) {
      return setTimeout(cb, 200);
    }), function() {
      var bot, _j, _len1;
      for (_j = 0, _len1 = bots.length; _j < _len1; _j++) {
        bot = bots[_j];
        players.push(new Player(bot, chips, bot.name));
      }
      return run();
    });
  };

}).call(this);
